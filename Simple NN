
# 신경망 가중치 편향을 numpy 행렬로 부여 
# 나중에는 이를 pickle를 사용해서 불러올 숭 있다.
# np.random.randn(a,b)로 더 간편하게 행렬을 무작위 배열하는 방법이 있다.
# 가중치와 편향은 모두 다음과 같은 방식으로 행렬을 부여한다.  

def init_network():
	network = {}
	network[“W1”] = np.array([0.1,0.3,0.5],[0.2,0.4,0.6])
	network[“b1”] = np.array([0.1,0.2,0.3])
	network[“W2”] = np.array([[0.1,0.2],[0.2,0.5],[0.3,0.6]))
	network[“b2”] = np.array([0.1,0.2])
	network[“w3”] = np.array([0.1,0.3],[0.2,0.4])
	network[“b3”] = np.array([0.1,0.2])

return network 

# 사전에 정의된 가중치, 편향을 간소하게 문자에 부여한다.

def forward(network, x):
W1,W2,W3 = network[“W1”], network[“W2”], network[“W3”]
b1,b2,b3 = network[“b1”], network[“b2”], network[“b3”]

#순전파 신경망 층 구현 (행렬 계산)

a1 = np.dot(x,w1) + b1
z1 sigmoid(a1)
a2 = np.dot(z1,w2) + b2
z2 = sigmoid(a2)
a3 = np.dot(z2,w3) + b3
y = identity_funtion(a3)

return y

network = init_network()

#초기 입력 값
x = np.array([1.0,0.5])

#순전파 계산
y = forward(network, x)
